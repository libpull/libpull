From dfa910555cb3e1a5b202f113a63996c121e0f673 Mon Sep 17 00:00:00 2001
From: Antonio Langiu <antonio.langiu@studenti.polito.it>
Date: Wed, 6 Jun 2018 12:47:24 +0200
Subject: [PATCH] Use Contiki memory allocation

---
 lib/atca_command.c | 20 +++++++++++++++++++-
 lib/atca_device.c  | 19 ++++++++++++++++++-
 lib/atca_iface.c   | 18 ++++++++++++++++++
 3 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/lib/atca_command.c b/lib/atca_command.c
index f822e2e..bae0bd9 100644
--- a/lib/atca_command.c
+++ b/lib/atca_command.c
@@ -41,6 +41,13 @@
 #include "atca_command.h"
 #include "atca_devtypes.h"
 
+#ifdef WITH_CONTIKI_NG
+#include "lib/memb.h"
+
+/* Contiki Memory Allocation */
+MEMB(commands, atca_command, 20);
+#endif /* WITH_CONTIKI_NG */
+
 /** \brief ATCACommand CheckMAC method
  * \param[in] ca_cmd   instance
  * \param[in] packet  pointer to the packet containing the command being built
@@ -754,13 +761,20 @@ ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
 {
     ATCA_STATUS status = ATCA_SUCCESS;
     ATCACommand ca_cmd;
-
+#ifdef WITH_CONTIKI_NG
+    ca_cmd = (ATCACommand)memb_alloc(&commands);
+#else
     ca_cmd = (ATCACommand)malloc(sizeof(atca_command));
+#endif
     ca_cmd->dt = device_type;
     ca_cmd->clock_divider = 0;
     if (status != ATCA_SUCCESS)
     {
+#ifdef WITH_CONTIKI_NG
+        memb_free(&commands, ca_cmd);
+#else
         free(ca_cmd);
+#endif
         ca_cmd = NULL;
     }
 
@@ -774,7 +788,11 @@ void deleteATCACommand(ATCACommand *ca_cmd)    // destructor
 {
     if (*ca_cmd)
     {
+#ifdef WITH_CONTIKI_NG
+        memb_free(&commands, (void*)*ca_cmd);
+#else
         free((void*)*ca_cmd);
+#endif
     }
 
     *ca_cmd = NULL;
diff --git a/lib/atca_device.c b/lib/atca_device.c
index d01eb98..886b855 100644
--- a/lib/atca_device.c
+++ b/lib/atca_device.c
@@ -31,6 +31,12 @@
 
 #include <stdlib.h>
 #include "atca_device.h"
+#ifdef WITH_CONTIKI_NG
+#include "lib/memb.h"
+
+/* Contiki Memory Allocation */
+MEMB(devices, struct atca_device, 20);
+#endif
 
 /** \defgroup device ATCADevice (atca_)
  * \brief ATCADevice object - composite of command and interface objects
@@ -49,14 +55,21 @@ ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
     {
         return NULL;
     }
-
+#ifdef WITH_CONTIKI_NG
+    ca_dev = (ATCADevice)memb_alloc(&devices);
+#else
     ca_dev = (ATCADevice)malloc(sizeof(struct atca_device));
+#endif
     ca_dev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
     ca_dev->mIface    = (ATCAIface)newATCAIface(cfg);
 
     if (ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     {
+#ifdef WITH_CONTIKI_NG
+        memb_free(&devices, ca_dev);
+#else
         free(ca_dev);
+#endif
         ca_dev = NULL;
     }
 
@@ -94,7 +107,11 @@ void deleteATCADevice(ATCADevice *ca_dev)   // destructor
     {
         deleteATCACommand( (ATCACommand*)&(dev->mCommands));
         deleteATCAIface((ATCAIface*)&(dev->mIface));
+#ifdef WITH_CONTIKI_NG
+        memb_free(&devices, (void*)*ca_dev);
+#else
         free((void*)*ca_dev);
+#endif
     }
 
     *ca_dev = NULL;
diff --git a/lib/atca_iface.c b/lib/atca_iface.c
index 0b92d68..f400217 100644
--- a/lib/atca_iface.c
+++ b/lib/atca_iface.c
@@ -34,6 +34,12 @@
 #include "atca_iface.h"
 #include "hal/atca_hal.h"
 
+#ifdef WITH_CONTIKI_NG
+#include "lib/memb.h"
+/* Contiki Memory Allocation */
+MEMB(ifaces, struct atca_iface, 5);
+#endif
+
 /** \defgroup interface ATCAIface (atca_)
  *  \brief Abstract interface to all CryptoAuth device types.  This interface
  *  connects to the HAL implementation and abstracts the physical details of the
@@ -51,13 +57,21 @@ ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
 {
     ATCAIface ca_iface;
 
+#ifdef WITH_CONTIKI_NG
+    ca_iface = (ATCAIface)memb_alloc(&ifaces);
+#else
     ca_iface = (ATCAIface)malloc(sizeof(struct atca_iface));
+#endif
     ca_iface->mType = cfg->iface_type;
     ca_iface->mIfaceCFG = cfg;
 
     if (atinit(ca_iface) != ATCA_SUCCESS)
     {
+#ifdef WITH_CONTIKI_NG
+        memb_free(&ifaces, ca_iface);
+#else
         free(ca_iface);
+#endif
         ca_iface = NULL;
     }
 
@@ -181,7 +195,11 @@ void deleteATCAIface(ATCAIface *ca_iface) // destructor
     if (*ca_iface)
     {
         hal_iface_release( (*ca_iface)->mType, (*ca_iface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
+#ifdef WITH_CONTIKI_NG
+        memb_free(&ifaces, (void*)*ca_iface);
+#else
         free((void*)*ca_iface);
+#endif
     }
 
     *ca_iface = NULL;
-- 
2.13.1

